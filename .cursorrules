# Tercer Espacio - Reglas de Desarrollo

format: cursorrules/v1

# Atomic Design
atomic_design:
  structure:
    atoms: Componentes básicos (botones, inputs, etiquetas)
    molecules: Combinaciones de átomos (formularios, cards)
    organisms: Secciones complejas (headers, footers)
    pages: Implementaciones específicas de otros componentes formando una vista para el usuario. (De momento nos estamos salteando los templates porque hoy seria overengineering)
  rules:
    - use-index-files
    - follow-hierarchy
    - maintain-isolation

# Reglas de Nomenclatura
naming:
  directories: kebab-case
  components: PascalCase
  styles: PascalCase,kebab-case
  types: PascalCase
  constants: kebab-case
  hooks: camelCase

# Estructura de Archivos
structure:
  root:
    - src/
    - public/
  src:
    - App.tsx
    - main.tsx
    - assets/
    - components/
      - atoms/
      - molecules/
      - organisms/
      - templates/
    - pages/
    - constants/
    - data/
    - styles/
    - types/

# Patrones de Componentes
patterns:
  component:
    required_files:
      - index.ts
      - ComponentName.tsx
      - ComponentName.scss
      - ComponentName.test.tsx
    template: |
      import React from 'react';
      import './ComponentName.scss';
      
      interface ComponentProps {
        // props
      }
      
      export const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
        return (
          // JSX
        );
      };
      
      export default ComponentName;
    index_template: |
      export { default as ComponentName } from './ComponentName';
      export * from './ComponentName';

# Reglas de Estilo
style:
  scss:
    pattern: BEM
    variables: required
      required: true
      file: src/styles/__variables.scss
    order:
      - positioning
      - box-model
      - typography
      - visual
      - misc
    nesting: max-depth-3
    rules:
      - use-variables
      - no-hardcoded-values
      - follow-bem
      - no-important
      - limit-nesting:
          max-depth: 2

# TypeScript
typescript:
  strict: true
  rules:
    - no-any
    - explicit-function-return-type
    - prefer-interface
  naming:
    interfaces: PascalCase
    types: PascalCase
    props: suffix-Props

# Imágenes
assets:
  images:
    formats:
      - webp
      - svg
      - png
    path: ${import.meta.env.BASE_URL}images/
    optimization: required

# GitHub Pages
deployment:
  base: /tercer-espacio/
  assets: public/
  routes: relative

# Control de Versiones
git:
  branches:
    main: production
    develop: active-development
    feature: feature/*
    fix: fix/*
  commit_format:
    - feat
    - fix
    - style
    - docs
    - refactor
    - test
    - chore

# Dependencias
dependencies:
  versioning: fixed
  documentation: required
  updates: security-first

# Rendimiento
performance:
  rules:
    - use-memo-for-expensive
    - lazy-load-routes
    - optimize-images
    - minimize-rerenders

# Documentación
documentation:
  required:
    - JSDoc-for-components
    - type-documentation
    - README-updates
    - CHANGELOG

# Linting
lint:
  eslint: true
  prettier: true
  rules:
    - no-unused-vars
    - no-console
    - prefer-const
    - max-len-80

# Testing
testing:
  required: true
  coverage: 80
  types:
    - unit
    - integration
    - e2e 